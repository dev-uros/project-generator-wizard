<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use Tests\Traits\ApiSignIn;

class SetUserAccountStatusTest extends TestCase
{

    use ApiSignIn;

    private string $setUserAccountStatusUrl;

    private User $user;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();

        $this->setUserAccountStatusUrl = route('users.set-status', ['user' => $this->user->id]);
    }


    public function test_unauthenticated_user_gets_401()
    {

        $request = $this->patchJson($this->setUserAccountStatusUrl);

        $request->assertUnauthorized();

    }

    public function test_cant_set_account_state_to_non_existent_user(): void
    {

        $this->signIn();

        $nonExistingUserUrl = route('users.set-status', ['user' => 10000]);

        $request = $this->patchJson($nonExistingUserUrl);

        $request->assertNotFound();
    }

    public function test_user_account_state_is_changes(): void
    {
        $this->signIn();

        $request = $this->patchJson($this->setUserAccountStatusUrl);

        $request->assertOk();

        $this->user->refresh();

        $request->assertJsonStructure([
            'message',
            'data' => [
                'user'
            ]
        ]);
        $accountState = $this->user->is_active ? 'reaktiviran' : 'deaktiviran';

        $request->assertJson([
            'message' => 'UspeÅ¡no ' . $accountState . ' nalog  korisnika: ' . $this->user->name . ' ' . $this->user->surname,
            'data' => [
                'user' => $this->user->toArray()
            ]
        ]);
    }
}
