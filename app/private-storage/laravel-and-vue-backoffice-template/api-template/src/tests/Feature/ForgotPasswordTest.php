<?php

namespace Tests\Feature;

use App\Interfaces\PasswordResetRepositoryInterface;
use App\Mail\ForgotPasswordMail;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Str;
use Tests\TestCase;

class ForgotPasswordTest extends TestCase
{

    private PasswordResetRepositoryInterface $passwordResetRepository;
    private string $forgotPasswordUrl;

    private array $forgotPasswordRequest;

    private User $user;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->passwordResetRepository = resolve(PasswordResetRepositoryInterface::class);

        $this->forgotPasswordUrl = route('forgot-password');

        $this->user = User::factory()->create();

        $this->forgotPasswordRequest = [
            'email' => $this->user->email
        ];
    }

    public function test_email_required_validation():void
    {
        $this->forgotPasswordRequest['email'] = '';

        $response = $this->postJson(
            $this->forgotPasswordUrl,
            $this->forgotPasswordRequest
        );

        $response->assertUnprocessable();

        $response->assertInvalid([
            'email'=>'E-mail adresa je obavezna'
        ]);



        $this->forgotPasswordRequest['email'] = null;

        $response = $this->postJson(
            $this->forgotPasswordUrl,
            $this->forgotPasswordRequest
        );

        $response->assertUnprocessable();

        $response->assertInvalid([
            'email'=>'E-mail adresa je obavezna'
        ]);


        unset($this->forgotPasswordRequest['email']);

        $response = $this->postJson(
            $this->forgotPasswordUrl,
            $this->forgotPasswordRequest
        );

        $response->assertUnprocessable();

        $response->assertInvalid([
            'email'=>'E-mail adresa je obavezna'
        ]);
    }

    public function test_only_active_users_can_reset_password_validation():void
    {

        $this->user->update([
            'is_active'=> false
        ]);

        $response = $this->postJson(
            $this->forgotPasswordUrl,
            $this->forgotPasswordRequest
        );

        $response->assertUnprocessable();

        $response->assertInvalid([
            'email'=>'Uneta e-mail adresa ne postoji u našim rekordima'
        ]);
    }

    public function test_is_forgot_password_email_sent()
    {
        Mail::fake();

        $request = $this->postJson($this->forgotPasswordUrl, $this->forgotPasswordRequest);

        $request->assertOk();

        $request->assertJsonStructure(['message']);

        $request->assertJson([
            'message' => 'Uspešno ste poslali zahtev za resetovanje šifre na e-mail adresu ' . $this->forgotPasswordRequest['email']
        ]);

        Mail::assertSent(ForgotPasswordMail::class, function (ForgotPasswordMail $mail) {
            return $mail->hasTo($this->user->email);
        });

    }

    public function test_forgot_password_email_content()
    {

        $token = $this->generateForgotPasswordToken($this->user);

        $mailable = new ForgotPasswordMail($this->user, $token);

        $mailable->assertSeeInHtml(config(
                'frontend-app.production_password_reset_url'
            ) . $token . '/?email=' . $this->user->email);

    }

    private function generateForgotPasswordToken(User $user): string{
        $newUserToken = Str::random(64);

        $this->passwordResetRepository->store($user->email, $newUserToken);

        return $newUserToken;
    }
}
