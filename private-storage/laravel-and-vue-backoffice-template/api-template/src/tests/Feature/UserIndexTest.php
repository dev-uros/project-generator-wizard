<?php

namespace Tests\Feature;

use App\Interfaces\UserRepositoryInterface;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use Tests\Traits\ApiSignIn;

class UserIndexTest extends TestCase
{

    use ApiSignIn;

    private UserRepositoryInterface $userRepository;

    private string $userIndexUrlRouteName;

    private array $userIndexRequest;


    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->userRepository = resolve(UserRepositoryInterface::class);

        User::factory()->create([
            'is_active'=>false
        ]);

        User::factory()->create([
            'is_active'=>true
        ]);
        $this->userIndexRequest = [
            'accountState' => -1
        ];

        $this->userIndexUrlRouteName = 'users.index';


    }

    public function test_unauthenticated_user_gets_401()
    {

        $request = $this->getJson(route($this->userIndexUrlRouteName, $this->userIndexRequest));

        $request->assertUnauthorized();

    }

    public function test_get_all_users_filter(){

        $this->signIn();

        $request = $this->getJson(
            route($this->userIndexUrlRouteName, $this->userIndexRequest)
        );

        $request->assertOk();

        $request->assertJsonStructure([
            'data'=>[
                'users'
            ]
        ]);

        $users = $request->json()['data']['users'];

        $activeUsers = User::query()
            ->where('is_active', true)
            ->count();

        $inactiveUsers = User::query()
            ->where('is_active', false)
            ->count();

        $activeUsersInResponse = collect($users)->where('is_active', true)->count();

        $inactiveUsersInResponse = collect($users)->where('is_active', false)->count();

        $this->assertEquals($activeUsers, $activeUsersInResponse);

        $this->assertEquals($inactiveUsers, $inactiveUsersInResponse);

    }

    public function test_get_only_active_users_filter(){

        $this->signIn();

        $this->userIndexRequest['accountState'] = 1;

        $request = $this->getJson(
            route($this->userIndexUrlRouteName, $this->userIndexRequest)
        );

        $request->assertOk();

        $request->assertJsonStructure([
            'data'=>[
                'users'
            ]
        ]);

        $users = $request->json()['data']['users'];

        $inactiveUsersInResponse = collect($users)->where('is_active', false)->count();

        $this->assertEquals(0, $inactiveUsersInResponse);

    }

    public function test_get_only_inactive_users_filter(){

        $this->signIn();

        $this->userIndexRequest['accountState'] = 0;

        $request = $this->getJson(
            route($this->userIndexUrlRouteName, $this->userIndexRequest)
        );

        $request->assertOk();

        $request->assertJsonStructure([
            'data'=>[
                'users'
            ]
        ]);

        $users = $request->json()['data']['users'];

        $activeUsersInResponse = collect($users)->where('is_active', true)->count();

        $this->assertEquals(0, $activeUsersInResponse);

    }

}
