<?php

namespace Tests\Feature;

use App\Models\SessionTimeout;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use Tests\Traits\ApiSignIn;

class SetSessionTimeOutPeriodTest extends TestCase
{

    use ApiSignIn;
    private string $setSessionTimeOutPeriodUrl;

    private array $setSessionTimeOutPeriodRequest;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->setSessionTimeOutPeriodUrl = route('settings.session-timeout');

        $this->setSessionTimeOutPeriodRequest = ['timeout'=>120];

    }

    public function test_unauthenticated_user_gets_401()
    {

        $request = $this->patchJson(
            $this->setSessionTimeOutPeriodUrl,
            $this->setSessionTimeOutPeriodRequest
        );

        $request->assertUnauthorized();

    }


    public function test_timeout_required_validation():void
    {
        $this->signIn();

        $this->setSessionTimeOutPeriodRequest['timeout'] = '';

        $response = $this->patchJson(
            $this->setSessionTimeOutPeriodUrl,
            $this->setSessionTimeOutPeriodRequest
        );

        $response->assertUnprocessable();

        $response->assertInvalid([
            'timeout'=>'Morate uneti vreme trajanja sesije'
        ]);


        $this->setSessionTimeOutPeriodRequest['timeout'] = null;

        $response = $this->patchJson(
            $this->setSessionTimeOutPeriodUrl,
            $this->setSessionTimeOutPeriodRequest
        );

        $response->assertUnprocessable();

        $response->assertInvalid([
            'timeout'=>'Morate uneti vreme trajanja sesije'
        ]);


        unset($this->setSessionTimeOutPeriodRequest['timeout']);

        $response = $this->patchJson(
            $this->setSessionTimeOutPeriodUrl,
            $this->setSessionTimeOutPeriodRequest
        );

        $response->assertUnprocessable();

        $response->assertInvalid([
            'timeout'=>'Morate uneti vreme trajanja sesije'
        ]);
    }

    public function test_timeout_integer_validation():void{

        $this->signIn();

        $this->setSessionTimeOutPeriodRequest['timeout'] = 1.20;

        $response = $this->patchJson(
            $this->setSessionTimeOutPeriodUrl,
            $this->setSessionTimeOutPeriodRequest
        );

        $response->assertUnprocessable();

        $response->assertInvalid([
            'timeout'=>'Vreme trajanja sesije mora biti ceo broj'
        ]);

    }

    public function test_timeout_greater_than_zero_validation():void{

        $this->signIn();

        $this->setSessionTimeOutPeriodRequest['timeout'] = -10;

        $response = $this->patchJson(
            $this->setSessionTimeOutPeriodUrl,
            $this->setSessionTimeOutPeriodRequest
        );

        $response->assertUnprocessable();

        $response->assertInvalid([
            'timeout'=>'Vreme trajanja sesije mora biti veće od 0'
        ]);


        $this->setSessionTimeOutPeriodRequest['timeout'] = 0;

        $response = $this->patchJson(
            $this->setSessionTimeOutPeriodUrl,
            $this->setSessionTimeOutPeriodRequest
        );

        $response->assertUnprocessable();

        $response->assertInvalid([
            'timeout'=>'Vreme trajanja sesije mora biti veće od 0'
        ]);
    }

    public function new_session_timeout_period_can_be_set(): void{

        $this->signIn();

        $request = $this->patchJson(
            $this->setSessionTimeOutPeriodUrl,
            $this->setSessionTimeOutPeriodRequest
        );

        $request->assertOk();

        $request->assertJsonStructure([
            'message',
            'data'=>[
                'sessionTimeout'
            ]
        ]);

        $request->assertJson([
            'message'=> 'Uspešno ažurirano trajanje sesije',
            'data' =>[
                'sessionTimeout'=>SessionTimeout::first()->toArray()
            ]
        ]);

        $this->assertDatabaseHas('session_timeout', ['timeout_period'=>$this->setSessionTimeOutPeriodRequest['timeout']]);
    }
}
